{"name":"Web-storage-cache","tagline":"Added `expires` attribute and serialize data with `JSON.parse`  for the localStorage and sessionStorage.","body":"# WebStorageCache  \r\n[![Build Status](https://travis-ci.org/WQTeam/web-storage-cache.svg?branch=master)](https://travis-ci.org/WQTeam/web-storage-cache)\r\n\r\n<a href='https://gitter.im/WQTeam/web-storage-cache'>\r\n<img src='https://badges.gitter.im/Join%20Chat.svg' alt='Gitter Chat' />\r\n</a>\r\n\r\nWebStorageCache backed by [storage interface](http://www.w3.org/TR/webstorage/#storage).  \r\n\r\n### Language\r\n[中文](https://github.com/WQTeam/web-storage-cache/blob/master/README_zh_CN.md)\r\n\r\n# Usage\r\n\r\n[Download](https://github.com/WQTeam/web-storage-cache/releases) the latest WebStorageCache from GitHub.\r\n\r\nTo use WebStorageCache, just drop a single JavaScript file into your page:\r\n```html\r\n<script src=\"src/web-storage-cache.js\"></script>\r\n<script>\r\n// create WebStorageCache instance.\r\nvar wsCache = new WebStorageCache();\r\n// cache 'wqteam' at 'username', expired in 100 seconds\r\nwsCache.set('username', 'wqteam', {exp : 100});\r\n</script>\r\n```\r\nYou can also use WebStorageCache with RequireJS:\r\n```javascript\r\ndefine(['web-storage-cache'], function(WebStorageCache) {\r\n    // create WebStorageCache instance.\r\n    var wsCache = new WebStorageCache();\r\n    // cache 'wqteam' at 'username', expired in 100 seconds\r\n    wsCache.set('username', 'wqteam', {exp : 100});\r\n});\r\n```\r\n\r\n## Demo\r\n```javascript\r\nvar wsCache = new WebStorageCache();\r\n\r\n// cache 'wqteam' at 'username', expired in 100 seconds\r\nwsCache.set('username', 'wqteam', {exp : 100});\r\n\r\n// deadline in  May 18 2015\r\nwsCache.set('username', 'wqteam', {exp : new Date('2015 5 18')});\r\n\r\n// get 'username'\r\nwsCache.get('username');\r\n\r\n// cache an object literal - default uses JSON.stringify under the hood\r\nwsCache.set('user', { name: 'Wu', organization: 'wqteam'});\r\n\r\n// Get the cache object - default uses JSON.parse under the hood\r\nvar user = wsCache.get('user');\r\nalert(user.name + ' belongs to ' + user.organization);\r\n\r\n// delete 'username'\r\nwsCache.delete('username');\r\n\r\n// manually delete all expires CacheItem. return deleted key's array.\r\nwsCache.deleteAllExpires();\r\n\r\n// Clear all keys\r\nwsCache.clear();\r\n\r\n// Set a new expiration time for an existing key.\r\nwsCache.touch('username',  1000);\r\n\r\n// Add key-value item to cache, success only when the key is not exists in cache\r\nwsCache.add('username2', 'wqteam', {exp : 1000});\r\n\r\n// Replace the key's data item in cache, success only when the key's data item is exists in cache.\r\nwsCache.replace('username', 'new wqteam', {exp : 1000});\r\n\r\n// check if the 'storage' supported by the user browser. if it`s not supported by the user browser all the  WebStorageCache API methods will do noting.\r\nwsCache.isSupported();\r\n\r\n```\r\n# API\r\n\r\n## Constructor\r\n```javascript\r\nvar wsCache = new WebStorageCache({\r\n    // [option] 'localStorage', 'sessionStorage', window.localStorage, window.sessionStorage or\r\n    // other storage instance implement [Storage API].\r\n    // default 'localStorage'.\r\n    storage: 'localStorage',\r\n    // [option] //An expiration time, in seconds. default never .\r\n    exp: Infinity\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}